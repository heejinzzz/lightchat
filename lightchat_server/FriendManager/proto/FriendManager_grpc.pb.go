// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/FriendManager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendManagerClient is the client API for FriendManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendManagerClient interface {
	AcceptNewFriend(ctx context.Context, in *NewFriendRequest, opts ...grpc.CallOption) (*AcceptNewFriendResponse, error)
	ChangeRemarkName(ctx context.Context, in *ChangeRemarkNameRequest, opts ...grpc.CallOption) (*ChangeRemarkNameResponse, error)
	CheckFriend(ctx context.Context, in *CheckFriendRequest, opts ...grpc.CallOption) (*CheckFriendResponse, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error)
	GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error)
	GetNewFriendRequests(ctx context.Context, in *GetNewFriendRequestsRequest, opts ...grpc.CallOption) (*GetNewFriendRequestsResponse, error)
	RejectNewFriend(ctx context.Context, in *NewFriendRequest, opts ...grpc.CallOption) (*RejectNewFriendResponse, error)
	SendNewFriendRequest(ctx context.Context, in *NewFriendRequest, opts ...grpc.CallOption) (*SendNewFriendRequestResponse, error)
}

type friendManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendManagerClient(cc grpc.ClientConnInterface) FriendManagerClient {
	return &friendManagerClient{cc}
}

func (c *friendManagerClient) AcceptNewFriend(ctx context.Context, in *NewFriendRequest, opts ...grpc.CallOption) (*AcceptNewFriendResponse, error) {
	out := new(AcceptNewFriendResponse)
	err := c.cc.Invoke(ctx, "/FriendManager/acceptNewFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendManagerClient) ChangeRemarkName(ctx context.Context, in *ChangeRemarkNameRequest, opts ...grpc.CallOption) (*ChangeRemarkNameResponse, error) {
	out := new(ChangeRemarkNameResponse)
	err := c.cc.Invoke(ctx, "/FriendManager/changeRemarkName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendManagerClient) CheckFriend(ctx context.Context, in *CheckFriendRequest, opts ...grpc.CallOption) (*CheckFriendResponse, error) {
	out := new(CheckFriendResponse)
	err := c.cc.Invoke(ctx, "/FriendManager/checkFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendManagerClient) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error) {
	out := new(DeleteFriendResponse)
	err := c.cc.Invoke(ctx, "/FriendManager/deleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendManagerClient) GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error) {
	out := new(GetFriendsResponse)
	err := c.cc.Invoke(ctx, "/FriendManager/getFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendManagerClient) GetNewFriendRequests(ctx context.Context, in *GetNewFriendRequestsRequest, opts ...grpc.CallOption) (*GetNewFriendRequestsResponse, error) {
	out := new(GetNewFriendRequestsResponse)
	err := c.cc.Invoke(ctx, "/FriendManager/getNewFriendRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendManagerClient) RejectNewFriend(ctx context.Context, in *NewFriendRequest, opts ...grpc.CallOption) (*RejectNewFriendResponse, error) {
	out := new(RejectNewFriendResponse)
	err := c.cc.Invoke(ctx, "/FriendManager/rejectNewFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendManagerClient) SendNewFriendRequest(ctx context.Context, in *NewFriendRequest, opts ...grpc.CallOption) (*SendNewFriendRequestResponse, error) {
	out := new(SendNewFriendRequestResponse)
	err := c.cc.Invoke(ctx, "/FriendManager/sendNewFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendManagerServer is the server API for FriendManager service.
// All implementations should embed UnimplementedFriendManagerServer
// for forward compatibility
type FriendManagerServer interface {
	AcceptNewFriend(context.Context, *NewFriendRequest) (*AcceptNewFriendResponse, error)
	ChangeRemarkName(context.Context, *ChangeRemarkNameRequest) (*ChangeRemarkNameResponse, error)
	CheckFriend(context.Context, *CheckFriendRequest) (*CheckFriendResponse, error)
	DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error)
	GetFriends(context.Context, *GetFriendsRequest) (*GetFriendsResponse, error)
	GetNewFriendRequests(context.Context, *GetNewFriendRequestsRequest) (*GetNewFriendRequestsResponse, error)
	RejectNewFriend(context.Context, *NewFriendRequest) (*RejectNewFriendResponse, error)
	SendNewFriendRequest(context.Context, *NewFriendRequest) (*SendNewFriendRequestResponse, error)
}

// UnimplementedFriendManagerServer should be embedded to have forward compatible implementations.
type UnimplementedFriendManagerServer struct {
}

func (UnimplementedFriendManagerServer) AcceptNewFriend(context.Context, *NewFriendRequest) (*AcceptNewFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptNewFriend not implemented")
}
func (UnimplementedFriendManagerServer) ChangeRemarkName(context.Context, *ChangeRemarkNameRequest) (*ChangeRemarkNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRemarkName not implemented")
}
func (UnimplementedFriendManagerServer) CheckFriend(context.Context, *CheckFriendRequest) (*CheckFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFriend not implemented")
}
func (UnimplementedFriendManagerServer) DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedFriendManagerServer) GetFriends(context.Context, *GetFriendsRequest) (*GetFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (UnimplementedFriendManagerServer) GetNewFriendRequests(context.Context, *GetNewFriendRequestsRequest) (*GetNewFriendRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewFriendRequests not implemented")
}
func (UnimplementedFriendManagerServer) RejectNewFriend(context.Context, *NewFriendRequest) (*RejectNewFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectNewFriend not implemented")
}
func (UnimplementedFriendManagerServer) SendNewFriendRequest(context.Context, *NewFriendRequest) (*SendNewFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNewFriendRequest not implemented")
}

// UnsafeFriendManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendManagerServer will
// result in compilation errors.
type UnsafeFriendManagerServer interface {
	mustEmbedUnimplementedFriendManagerServer()
}

func RegisterFriendManagerServer(s grpc.ServiceRegistrar, srv FriendManagerServer) {
	s.RegisterService(&FriendManager_ServiceDesc, srv)
}

func _FriendManager_AcceptNewFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendManagerServer).AcceptNewFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendManager/acceptNewFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendManagerServer).AcceptNewFriend(ctx, req.(*NewFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendManager_ChangeRemarkName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRemarkNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendManagerServer).ChangeRemarkName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendManager/changeRemarkName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendManagerServer).ChangeRemarkName(ctx, req.(*ChangeRemarkNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendManager_CheckFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendManagerServer).CheckFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendManager/checkFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendManagerServer).CheckFriend(ctx, req.(*CheckFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendManager_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendManagerServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendManager/deleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendManagerServer).DeleteFriend(ctx, req.(*DeleteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendManager_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendManagerServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendManager/getFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendManagerServer).GetFriends(ctx, req.(*GetFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendManager_GetNewFriendRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewFriendRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendManagerServer).GetNewFriendRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendManager/getNewFriendRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendManagerServer).GetNewFriendRequests(ctx, req.(*GetNewFriendRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendManager_RejectNewFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendManagerServer).RejectNewFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendManager/rejectNewFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendManagerServer).RejectNewFriend(ctx, req.(*NewFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendManager_SendNewFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendManagerServer).SendNewFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendManager/sendNewFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendManagerServer).SendNewFriendRequest(ctx, req.(*NewFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendManager_ServiceDesc is the grpc.ServiceDesc for FriendManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FriendManager",
	HandlerType: (*FriendManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "acceptNewFriend",
			Handler:    _FriendManager_AcceptNewFriend_Handler,
		},
		{
			MethodName: "changeRemarkName",
			Handler:    _FriendManager_ChangeRemarkName_Handler,
		},
		{
			MethodName: "checkFriend",
			Handler:    _FriendManager_CheckFriend_Handler,
		},
		{
			MethodName: "deleteFriend",
			Handler:    _FriendManager_DeleteFriend_Handler,
		},
		{
			MethodName: "getFriends",
			Handler:    _FriendManager_GetFriends_Handler,
		},
		{
			MethodName: "getNewFriendRequests",
			Handler:    _FriendManager_GetNewFriendRequests_Handler,
		},
		{
			MethodName: "rejectNewFriend",
			Handler:    _FriendManager_RejectNewFriend_Handler,
		},
		{
			MethodName: "sendNewFriendRequest",
			Handler:    _FriendManager_SendNewFriendRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/FriendManager.proto",
}
