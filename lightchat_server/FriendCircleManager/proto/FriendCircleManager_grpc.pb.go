// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/FriendCircleManager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendCircleManagerClient is the client API for FriendCircleManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendCircleManagerClient interface {
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetFriendCircles(ctx context.Context, in *GetFriendCirclesRequest, opts ...grpc.CallOption) (*GetFriendCirclesResponse, error)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*FriendCircle, error)
	Publish(ctx context.Context, in *FriendCircle, opts ...grpc.CallOption) (*PublishResponse, error)
	SendComment(ctx context.Context, in *SendCommentRequest, opts ...grpc.CallOption) (*SendCommentResponse, error)
	Thumb(ctx context.Context, in *ThumbRequest, opts ...grpc.CallOption) (*ThumbResponse, error)
}

type friendCircleManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendCircleManagerClient(cc grpc.ClientConnInterface) FriendCircleManagerClient {
	return &friendCircleManagerClient{cc}
}

func (c *friendCircleManagerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/FriendCircleManager/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendCircleManagerClient) GetFriendCircles(ctx context.Context, in *GetFriendCirclesRequest, opts ...grpc.CallOption) (*GetFriendCirclesResponse, error) {
	out := new(GetFriendCirclesResponse)
	err := c.cc.Invoke(ctx, "/FriendCircleManager/getFriendCircles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendCircleManagerClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*FriendCircle, error) {
	out := new(FriendCircle)
	err := c.cc.Invoke(ctx, "/FriendCircleManager/getDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendCircleManagerClient) Publish(ctx context.Context, in *FriendCircle, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/FriendCircleManager/publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendCircleManagerClient) SendComment(ctx context.Context, in *SendCommentRequest, opts ...grpc.CallOption) (*SendCommentResponse, error) {
	out := new(SendCommentResponse)
	err := c.cc.Invoke(ctx, "/FriendCircleManager/sendComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendCircleManagerClient) Thumb(ctx context.Context, in *ThumbRequest, opts ...grpc.CallOption) (*ThumbResponse, error) {
	out := new(ThumbResponse)
	err := c.cc.Invoke(ctx, "/FriendCircleManager/thumb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendCircleManagerServer is the server API for FriendCircleManager service.
// All implementations should embed UnimplementedFriendCircleManagerServer
// for forward compatibility
type FriendCircleManagerServer interface {
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	GetFriendCircles(context.Context, *GetFriendCirclesRequest) (*GetFriendCirclesResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*FriendCircle, error)
	Publish(context.Context, *FriendCircle) (*PublishResponse, error)
	SendComment(context.Context, *SendCommentRequest) (*SendCommentResponse, error)
	Thumb(context.Context, *ThumbRequest) (*ThumbResponse, error)
}

// UnimplementedFriendCircleManagerServer should be embedded to have forward compatible implementations.
type UnimplementedFriendCircleManagerServer struct {
}

func (UnimplementedFriendCircleManagerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFriendCircleManagerServer) GetFriendCircles(context.Context, *GetFriendCirclesRequest) (*GetFriendCirclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendCircles not implemented")
}
func (UnimplementedFriendCircleManagerServer) GetDetail(context.Context, *GetDetailRequest) (*FriendCircle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedFriendCircleManagerServer) Publish(context.Context, *FriendCircle) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedFriendCircleManagerServer) SendComment(context.Context, *SendCommentRequest) (*SendCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendComment not implemented")
}
func (UnimplementedFriendCircleManagerServer) Thumb(context.Context, *ThumbRequest) (*ThumbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thumb not implemented")
}

// UnsafeFriendCircleManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendCircleManagerServer will
// result in compilation errors.
type UnsafeFriendCircleManagerServer interface {
	mustEmbedUnimplementedFriendCircleManagerServer()
}

func RegisterFriendCircleManagerServer(s grpc.ServiceRegistrar, srv FriendCircleManagerServer) {
	s.RegisterService(&FriendCircleManager_ServiceDesc, srv)
}

func _FriendCircleManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendCircleManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendCircleManager/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendCircleManagerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendCircleManager_GetFriendCircles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendCirclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendCircleManagerServer).GetFriendCircles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendCircleManager/getFriendCircles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendCircleManagerServer).GetFriendCircles(ctx, req.(*GetFriendCirclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendCircleManager_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendCircleManagerServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendCircleManager/getDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendCircleManagerServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendCircleManager_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendCircle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendCircleManagerServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendCircleManager/publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendCircleManagerServer).Publish(ctx, req.(*FriendCircle))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendCircleManager_SendComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendCircleManagerServer).SendComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendCircleManager/sendComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendCircleManagerServer).SendComment(ctx, req.(*SendCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendCircleManager_Thumb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendCircleManagerServer).Thumb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendCircleManager/thumb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendCircleManagerServer).Thumb(ctx, req.(*ThumbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendCircleManager_ServiceDesc is the grpc.ServiceDesc for FriendCircleManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendCircleManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FriendCircleManager",
	HandlerType: (*FriendCircleManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "delete",
			Handler:    _FriendCircleManager_Delete_Handler,
		},
		{
			MethodName: "getFriendCircles",
			Handler:    _FriendCircleManager_GetFriendCircles_Handler,
		},
		{
			MethodName: "getDetail",
			Handler:    _FriendCircleManager_GetDetail_Handler,
		},
		{
			MethodName: "publish",
			Handler:    _FriendCircleManager_Publish_Handler,
		},
		{
			MethodName: "sendComment",
			Handler:    _FriendCircleManager_SendComment_Handler,
		},
		{
			MethodName: "thumb",
			Handler:    _FriendCircleManager_Thumb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/FriendCircleManager.proto",
}
