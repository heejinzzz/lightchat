// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: UserManager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagerClient is the client API for UserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerClient interface {
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*GetUserInfoByIdResponse, error)
	GetUserInfoByNumber(ctx context.Context, in *GetUserInfoByNumberRequest, opts ...grpc.CallOption) (*GetUserInfoByNumberResponse, error)
	LoginWithPassword(ctx context.Context, in *LoginWithPasswordRequest, opts ...grpc.CallOption) (*LoginWithPasswordResponse, error)
	LoginWithSMS(ctx context.Context, in *LoginWithSMSRequest, opts ...grpc.CallOption) (*LoginWithSMSResponse, error)
	ChangeUserName(ctx context.Context, in *ChangeUserNameRequest, opts ...grpc.CallOption) (*ChangeUserNameResponse, error)
	ChangeUserGender(ctx context.Context, in *ChangeUserGenderRequest, opts ...grpc.CallOption) (*ChangeUserGenderResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RequestSMS(ctx context.Context, in *RequestSMSRequest, opts ...grpc.CallOption) (*RequestSMSResponse, error)
}

type userManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerClient(cc grpc.ClientConnInterface) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*GetUserInfoByIdResponse, error) {
	out := new(GetUserInfoByIdResponse)
	err := c.cc.Invoke(ctx, "/UserManager/getUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetUserInfoByNumber(ctx context.Context, in *GetUserInfoByNumberRequest, opts ...grpc.CallOption) (*GetUserInfoByNumberResponse, error) {
	out := new(GetUserInfoByNumberResponse)
	err := c.cc.Invoke(ctx, "/UserManager/getUserInfoByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) LoginWithPassword(ctx context.Context, in *LoginWithPasswordRequest, opts ...grpc.CallOption) (*LoginWithPasswordResponse, error) {
	out := new(LoginWithPasswordResponse)
	err := c.cc.Invoke(ctx, "/UserManager/loginWithPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) LoginWithSMS(ctx context.Context, in *LoginWithSMSRequest, opts ...grpc.CallOption) (*LoginWithSMSResponse, error) {
	out := new(LoginWithSMSResponse)
	err := c.cc.Invoke(ctx, "/UserManager/loginWithSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) ChangeUserName(ctx context.Context, in *ChangeUserNameRequest, opts ...grpc.CallOption) (*ChangeUserNameResponse, error) {
	out := new(ChangeUserNameResponse)
	err := c.cc.Invoke(ctx, "/UserManager/changeUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) ChangeUserGender(ctx context.Context, in *ChangeUserGenderRequest, opts ...grpc.CallOption) (*ChangeUserGenderResponse, error) {
	out := new(ChangeUserGenderResponse)
	err := c.cc.Invoke(ctx, "/UserManager/changeUserGender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/UserManager/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) RequestSMS(ctx context.Context, in *RequestSMSRequest, opts ...grpc.CallOption) (*RequestSMSResponse, error) {
	out := new(RequestSMSResponse)
	err := c.cc.Invoke(ctx, "/UserManager/requestSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServer is the server API for UserManager service.
// All implementations should embed UnimplementedUserManagerServer
// for forward compatibility
type UserManagerServer interface {
	GetUserInfoById(context.Context, *GetUserInfoByIdRequest) (*GetUserInfoByIdResponse, error)
	GetUserInfoByNumber(context.Context, *GetUserInfoByNumberRequest) (*GetUserInfoByNumberResponse, error)
	LoginWithPassword(context.Context, *LoginWithPasswordRequest) (*LoginWithPasswordResponse, error)
	LoginWithSMS(context.Context, *LoginWithSMSRequest) (*LoginWithSMSResponse, error)
	ChangeUserName(context.Context, *ChangeUserNameRequest) (*ChangeUserNameResponse, error)
	ChangeUserGender(context.Context, *ChangeUserGenderRequest) (*ChangeUserGenderResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RequestSMS(context.Context, *RequestSMSRequest) (*RequestSMSResponse, error)
}

// UnimplementedUserManagerServer should be embedded to have forward compatible implementations.
type UnimplementedUserManagerServer struct {
}

func (UnimplementedUserManagerServer) GetUserInfoById(context.Context, *GetUserInfoByIdRequest) (*GetUserInfoByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (UnimplementedUserManagerServer) GetUserInfoByNumber(context.Context, *GetUserInfoByNumberRequest) (*GetUserInfoByNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByNumber not implemented")
}
func (UnimplementedUserManagerServer) LoginWithPassword(context.Context, *LoginWithPasswordRequest) (*LoginWithPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithPassword not implemented")
}
func (UnimplementedUserManagerServer) LoginWithSMS(context.Context, *LoginWithSMSRequest) (*LoginWithSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithSMS not implemented")
}
func (UnimplementedUserManagerServer) ChangeUserName(context.Context, *ChangeUserNameRequest) (*ChangeUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserName not implemented")
}
func (UnimplementedUserManagerServer) ChangeUserGender(context.Context, *ChangeUserGenderRequest) (*ChangeUserGenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserGender not implemented")
}
func (UnimplementedUserManagerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserManagerServer) RequestSMS(context.Context, *RequestSMSRequest) (*RequestSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSMS not implemented")
}

// UnsafeUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServer will
// result in compilation errors.
type UnsafeUserManagerServer interface {
	mustEmbedUnimplementedUserManagerServer()
}

func RegisterUserManagerServer(s grpc.ServiceRegistrar, srv UserManagerServer) {
	s.RegisterService(&UserManager_ServiceDesc, srv)
}

func _UserManager_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/getUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetUserInfoByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetUserInfoByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/getUserInfoByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetUserInfoByNumber(ctx, req.(*GetUserInfoByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_LoginWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).LoginWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/loginWithPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).LoginWithPassword(ctx, req.(*LoginWithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_LoginWithSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).LoginWithSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/loginWithSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).LoginWithSMS(ctx, req.(*LoginWithSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_ChangeUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).ChangeUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/changeUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).ChangeUserName(ctx, req.(*ChangeUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_ChangeUserGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserGenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).ChangeUserGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/changeUserGender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).ChangeUserGender(ctx, req.(*ChangeUserGenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_RequestSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).RequestSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/requestSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).RequestSMS(ctx, req.(*RequestSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManager_ServiceDesc is the grpc.ServiceDesc for UserManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUserInfoById",
			Handler:    _UserManager_GetUserInfoById_Handler,
		},
		{
			MethodName: "getUserInfoByNumber",
			Handler:    _UserManager_GetUserInfoByNumber_Handler,
		},
		{
			MethodName: "loginWithPassword",
			Handler:    _UserManager_LoginWithPassword_Handler,
		},
		{
			MethodName: "loginWithSMS",
			Handler:    _UserManager_LoginWithSMS_Handler,
		},
		{
			MethodName: "changeUserName",
			Handler:    _UserManager_ChangeUserName_Handler,
		},
		{
			MethodName: "changeUserGender",
			Handler:    _UserManager_ChangeUserGender_Handler,
		},
		{
			MethodName: "register",
			Handler:    _UserManager_Register_Handler,
		},
		{
			MethodName: "requestSMS",
			Handler:    _UserManager_RequestSMS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "UserManager.proto",
}
